#!/bin/bash
###############################################################################
##
##  costshare_chase
##
##  Purpose
##    See: hhttps://github.com/WhisperingChaos/costshare.source.sh
##    This is a concrete version used to transform Chase Bank Credit Card CSV
##    output into the output CSV generated by costshare.source.sh.
##    
##  Note
##    Adheres to "SOLID bash" principles:
##    https://github.com/WhisperingChaos/SOLID_Bash#solid_bash
##
###############################################################################

############################## Hook/Callback Functions ########################
##
##  The function(s)s below define the callback "interface" for this component.
##  Override them to provide the input needed to drive this component's output.
##  If unfamiliar with bash function override mechanism see:
##  https://github.com/WhisperingChaos/SOLID_Bash#function-overriding
##
###############################################################################

costshare_chase_vendor_pct_tbl(){
  msg_fatal  "must override this table definition"
}


costshare_chase_purchases_excluded_tbl(){
  msg_fatal  "must override this table definition"
}


costshare_chase_category_filter_tbl(){
  msg_fatal  "must override this table definition"
}

############################ private implementation ###########################
#
#   The code below shouldn't change unless there's a bug.
#
###############################################################################

costshare_chase__executable_compose(){
  local -r callFromDir="$( dirname "$1" )"

  local -r callSourcer="$callFromDir"'/config_sh/vendor/sourcer/sourcer.sh'
  local -r myRoot="$callFromDir"'/costshare_chase_program_sh'
  local mod
  for mod in $( "$callSourcer" "$myRoot"); do
    source "$mod"
  done
}
###############################################################################
##
##  Purpose
##    Execute the entire pipeline Chase CSV transform and reporting pipeline.
##  why
##    Encapsulates the entire pipeline in a function allowing for the detection
##    of lower level errors, whose return values are potentially masked
##    by the use of bash process substitution.
##  In
##    STDIN  - Chase Bank Credit Card CSV whose format matches that 
##             produced on 02/28/2022.
##  Out
##    STDOUT - newline delimited CSV records with format:
##
##             <Date>,<Vendor Name>,<Charge>,<PartyXpct>,<SharePartyXRound>,<SharePartyY>[,forwardedFields]
##
##               Date        - MM/DD/YYYY
##               Vendor Name - A.K.A Description. Vendor can contain
##                             any character value. It will also be normalized:
##                             whitespace appearing before the first non-whitespace
##                             character and those appearing after the last
##                             non-whitespace character are removed.  Also,
##                             repeating whitespace embedded inside a name are
##                             replaced by a single "space" charavter.
##               Charge      - either be a whole numger or a
##                             decimal number with 2 places of accuracy to right
##                             of decimal point.  It can be prefix by a sign(+-).
##               PartyXpct   - Party 'X' percentage applied to the charge
##               SharePartyXRound
##                           - Calculated Party 'X' portion of the charge
##                             rounded using "unbaised/bankers" rounding method.
##               SharePartyY - Calculated Party 'Y' portion of the charge.
##               Category    - purchase categories assigned by Chase Bank
##                            to a credit card purchase.
###############################################################################
costshare_chase__main(){
  costshare_chase__executable_compose "$0"

  trap "exit 0"                                SIGUSR1
  trap "costshare_chase__error_report; exit 1" SIGUSR2
  costshare_chase__pileline_run  2> >( costshare_chase__detect_error $$  >&2 )
  while sleep 1; do
    : # let error detector signal done 
  done
}

costshare_chase__main
